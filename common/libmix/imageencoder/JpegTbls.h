/*
* Copyright (c) 2009-2011 Intel Corporation.  All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#include <va/va_enc_jpeg.h>
#include <va/va_dec_jpeg.h>

unsigned char luma_dc_codes[16] = {
    0, 1, 5, 1, 1, 1, 1, 1,
    1, 0, 0, 0
};
unsigned char luma_dc_values[12] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0a, 0x0b
};
unsigned char luma_ac_codes[16] = {
    0, 2, 1, 3, 3, 2, 4, 3,
    5, 5, 4, 4, 0, 0, 1, 125
};
unsigned char luma_ac_values[162] = {
    0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
    0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
    0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
    0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
    0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
    0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
    0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
    0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
    0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
    0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
    0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
    0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
    0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
    0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
    0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
    0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
    0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
    0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
    0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
    0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
    0xf9, 0xfa
};

unsigned char chroma_dc_codes[16] = {
    0, 3, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 0
};
unsigned char chroma_dc_valudes[12] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0a, 0x0b
};
unsigned char chroma_ac_codes[16] = {
    0, 2, 1, 2, 4, 4, 3, 4,
    7, 5, 4, 4, 0, 1, 2, 119
};
unsigned char chroma_ac_values[162] = {
    0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
    0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
    0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
    0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
    0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
    0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
    0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
    0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
    0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
    0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
    0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
    0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
    0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
    0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
    0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
    0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
    0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
    0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
    0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
    0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
    0xf9, 0xfa
};

unsigned char default_luma_q_matrix[64] = {
    16, 11, 10, 16, 24, 40, 51, 61,
    12, 12, 14, 19, 26, 58, 60, 55,
    14, 13, 16, 24, 40, 57, 69, 56,
    14, 17, 22, 29, 51, 87, 80, 62,
    18, 22, 37, 56, 68, 109, 103, 77,
    24, 35, 55, 64, 81, 104, 113, 92,
    49, 64, 78, 87, 103, 121, 120, 101,
    72, 92, 95, 98, 112, 100, 103, 99
};

unsigned char default_chroma_q_matrix[64] = {
    17, 18, 24, 47, 99, 99, 99, 99,
    18, 21, 26, 66, 99, 99, 99, 99,
    24, 26, 56, 99, 99, 99, 99, 99,
    47, 66, 99, 99, 99, 99, 99, 99,
    99, 99, 99, 99, 99, 99, 99, 99,
    99, 99, 99, 99, 99, 99, 99, 99,
    99, 99, 99, 99, 99, 99, 99, 99,
    99, 99, 99, 99, 99, 99, 99, 99
};

void zigzag_scan_q_matrix(unsigned char quantiser_matrix[],
        unsigned char q_matrix[]) {
  int d=1; // start direction (diagonal up)
  int i=0, j=0, k=0; // index

  for (k=0; k<64; k++) {

    quantiser_matrix[k] = q_matrix[(j*8)+i];

    i += d; // next index positions
    j -= d;
    if (j < 0) { // outside top
      j = 0;
      d = -d; // change direction
    }
    else if (i < 0) {
      if (j > 7) { // outside left and bottom
        j = 7;
        i += 2;
      } else { // outside left
        i = 0;
      }
      d = -d;
    }
    else if (i > 7) { // outside right
      i = 7;
      j += 2;
      d = -d;
    }
    else if (j > 7) { // outside bottom
      j = 7;
      i += 2;
      d = -d;
    }
  }
}

//Build default huffman tables if the input bitstream is not specified
void build_default_enc_huffman_tables(VAHuffmanTableBufferJPEGBaseline* huffman_table)
{
    memset(huffman_table, 0, sizeof(VAHuffmanTableBufferJPEGBaseline));
    //Luma
    huffman_table->load_huffman_table[0] = 1;
    memcpy(huffman_table->huffman_table[0].num_dc_codes,
            luma_dc_codes, 16);
    memcpy(huffman_table->huffman_table[0].dc_values,
            luma_dc_values, 12);
    memcpy(huffman_table->huffman_table[0].num_ac_codes,
            luma_ac_codes, 16);
    memcpy(huffman_table->huffman_table[0].ac_values,
            luma_ac_values, 162);

    //Chroma
    huffman_table->load_huffman_table[1] = 1;
    memcpy(huffman_table->huffman_table[1].num_dc_codes,
            chroma_dc_codes, 16);
    memcpy(huffman_table->huffman_table[1].dc_values,
            chroma_dc_valudes, 12);
    memcpy(huffman_table->huffman_table[1].num_ac_codes,
            chroma_ac_codes, 16);
    memcpy(huffman_table->huffman_table[1].ac_values,
            chroma_ac_values, 162);
}

void build_default_enc_quantiser_tables(VAQMatrixBufferJPEG *q_matrix)
{
    memset(q_matrix, 0, sizeof(VAQMatrixBufferJPEG));
    //Chroma
    q_matrix->load_chroma_quantiser_matrix = 1;
    zigzag_scan_q_matrix(q_matrix->chroma_quantiser_matrix,
            default_chroma_q_matrix);
    //Luma
    q_matrix->load_lum_quantiser_matrix = 1;
    zigzag_scan_q_matrix(q_matrix->lum_quantiser_matrix,
            default_luma_q_matrix);
}
